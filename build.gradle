plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.study'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    queryDslVersion = '5.0.0'
    profile = (!project.hasProperty('profile') || !profile) ? 'local' : profile
}
//리소스 폴더 지정
sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "src/main/resources-s%{profile}"
        }
    }
}
dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    //OAuth2Service를 생성하기 위해 spring-boot-starter-oauth2-client 라이브러리를 사용
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-websocket'
//    implementation 'org.springframework.session:spring-session-core'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
    implementation 'org.springframework.boot:spring-boot-starter-webflux' // webclient 사용을 위한 라이브러리
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8' // Model mapper 라이브러리
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'// aws 라이브러리
    implementation 'org.springframework.boot:spring-boot-devtools'


    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    runtimeOnly 'com.mysql:mysql-connector-j'

    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.projectlombok:lombok'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'

// query dsl=============================================================
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"
    annotationProcessor(
            "javax.persistence:javax.persistence-api",
            "javax.annotation:javax.annotation-api",
    )
}
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
// query dsl=============================================================

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

tasks {
    processResources {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

/* QueryDSL 관련 내용 주석처리 */
/* gradle build 시 QClass 소스도 함께 build 하기 위해서 sourceSets에 해당 위치 추가 */
//def querydslSrcDir = 'src/main/generated'
//sourceSets {
//    main {
//        java {
//            srcDirs += [querydslSrcDir]
//        }
//    }
//}

/* 해당 내용 명시하지 않을 시 Q 파일 내 Generated를 import 할 때
   자바 9에만 있는 javax.annotation.processing.Generated 로 import 하기 때문에
*  다른 버전에서도 사용할 수 있도록 java.annotation.Generated로  import 하도록 설정하는 코드 */
//compileJava {
//    options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
//}
//
//tasks.withType(JavaCompile) {
//    options.generatedSourceOutputDirectory = file(querydslSrcDir)
//}
//
//clean {
//    // clean 실행 시 생성된 QClass 삭제
//    delete file(querydslSrcDir)
//}